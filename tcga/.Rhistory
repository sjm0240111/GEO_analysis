set.seed(33833)
mdl1 <- train(y~.,method="rf",data=vowel.train, verbose=F)
mdl2 <- train(y~.,method="gbm",data=vowel.train, verbose=F)
mean(predict(mdl1,vowel.test)==vowel.test$y)
mean(predict(mdl2,vowel.test)==vowel.test$y)
mean(predict(mdl2,vowel.test)==predict(mdl1,vowel.test))
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mdl1 <- train(diagnosis~.method="rf",data=training)
set.seed(62433)
mdl1 <- train(diagnosis~.,method="rf",data=training)
mdl2 <- train(diagnosis~.,method="gbm",data=training,verbose=F)
mdl3 <- train(diagnosis~.,method="lda",data=training,verbose=F)
pred1 <- predict(mdl1,testing)
pred2 <- predict(mdl2,testing)
pred3 <- predict(mdl3,testing)
pred1 <- predict(mdl1,training)
pred2 <- predict(mdl2,training)
pred3 <- predict(mdl3,training)
predDF <- data.frame(pred1,pred2,pred3,diagnosis = training$diagnosis)
combmdl <- train(diagnosis~.,method="rf",data = training)
combmdl <- train(diagnosis~.,method="rf",data = predDF)
pred1 <- predict(mdl1,testing)
pred2 <- predict(mdl2,testing)
pred3 <- predict(mdl3,testing)
predDF <- data.frame(pred1,pred2,pred3,diagnosis = testing$diagnosis)
combmdl <- train(diagnosis~.,method="rf",data = predDF)
mean(predict(combmdl,testing)==testing$diagnosis)
mean(pred1==testing$diagnosis)
mean(pred2==testing$diagnosis)
mean(pred3==testing$diagnosis)
rm(list = ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
View(training)
mdl1 <- train(CompressiveStrength~.,method="lasso",data = training)
install.packages("elasticnet")
mdl1 <- train(CompressiveStrength~.,method="lasso",data = training)
mdl1
mdl1$modelType
mdl1$finalModel
fit1 <- lm(CompressiveStrength~.,data = training)
fit1
summary(fit1)
cor(training)
library(lubridate) # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
?bats
View(testing)
fit1 <- bats(training$visitsTumblr)
plot(forecast(fit1))
fit1 <- bats(tstrain)
plot(forecast(fit1))
install.packages("quantmod")
install.packages("quantmod")
# make this an external chunk that can be included in any file
library(knitr)
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/',cache=TRUE)
options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
knit_hooks$set(plot = knitr:::hook_plot_html)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
library(quantmod)
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
# make this an external chunk that can be included in any file
library(knitr)
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/',cache=TRUE)
options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
knit_hooks$set(plot = knitr:::hook_plot_html)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
tstrain
class(tstrain)
attributes(tstrain)
?window
library(forecast)
fcast <- forecast(fit1)
plot(fcast)
accuracy(fcast,testing)
accuracy(fcast,testing$visitsTumblr)
to.monthly()
?to.monthly
View(GOOG)
GOOG <- GOOG[,-5]
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen,frequency=12)
plot(ts1,xlab="Years+1", ylab="GOOG")
plot(ts1,xlab="Years+1", ylab="GOOG")
plot(decompose(ts1),xlab="Years+1")
plot(decompose(ts1),xlab="Years+1")
ts1
ts1Train <- window(ts1,start=1,end=5)
ts1Test <- window(ts1,start=5,end=(7-0.01))
ts1Train
tsTest
ts1Test
ets1 <- ets(ts1Train,model="MMM")
fcast <- forecast(ets1)
plot(fcast); lines(ts1Test,col="red")
accuracy(fcast,ts1Test)
forecast(fit1)
?forecast
forecast(fit1,h=235)
plot(forecast(fit1))
plot(forecast(fit1,h=235))
lines(ts(testing$visitsTumblr),col="red")
forecast(fit1,h=235,level = 0.95)
fcast <- forecast(fit1,h=235,level = 0.95)
fcast$lower
mean(fcast$upper[,1]>testing$visitsTumblr)
rm(list = ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?createDataPartition
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
inTrain <- createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
rm(list = ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
View(testing)
library(e1071)
set.seed(325)
mdl <- train(CompressiveStrength~.,method="svm",data = training)
e1071
?`e1071-deprecated`
mdl <- svm(CompressiveStrength~.,data = training)
predict(mdl,testing)
pred <-predict(mdl,testing)
RMSE(pred,testing$CompressiveStrength)
knitr::opts_chunk$set(echo = TRUE)
system.time(mdlgbm <- train(classe~.,method="gbm",data = ttraining,verbose=FALSE))
training <- read.csv("Data/pml_train.csv",header = TRUE,row.names = 1,na.strings = c("NA","NaN","","#DIV/0!"))
testing <- read.csv("Data/pml_test.csv",header = TRUE,row.names = 1,na.strings = c("NA","NaN","","#DIV/0!"))
dim(training);dim(testing)
names(training)
meanna <- apply(training,2,function(x) mean(is.na(x)))
hist(meanna,breaks=100,main="NA proportion of the training data")
columns <- meanna==0
columns[1:6] <- FALSE
training2 <- training[,columns]
testing2 <- testing[,columns]
mean(is.na(testing2))
cor(training2[,1:52],unclass(training2[,53]))
set.seed(2333)
inTrain <- createDataPartition(training2$classe,p=0.8,list = FALSE)
library(dplyr)
library(ggplot2)
library(caret)
set.seed(2333)
inTrain <- createDataPartition(training2$classe,p=0.8,list = FALSE)
ttraining <- training2[inTrain,]
ttesting <- training2[-inTrain,]
system.time(mdlgbm <- train(classe~.,method="gbm",data = ttraining,verbose=FALSE))
predict(mdlgbm,ttesting)
mean(predict(mdlgbm,ttesting)==ttesting$classe)
mean(predict(mdlgbm,ttraining)==ttraining$classe)
system.time(mdlrf <- train(classe~.,method="rf",data = ttraining,verbose=FALSE))
mean(predict(mdlrf,ttesting)==ttesting$classe)
mean(predict(mdlrf,ttraining)==ttraining$classe)
?nb
system.time(mdllda <- train(classe~.,method="lda",data = ttraining,verbose=FALSE))
mean(predict(mdllda,ttraining)==ttraining$classe)
mean(predict(mdlrf,ttesting)==ttesting$classe)
mean(predict(mdllda,ttesting)==ttesting$classe)
system.time(mdlnb <- train(classe~.,method="nb",data = ttraining,verbose=FALSE))
mean(predict(mdlnb,ttesting)==ttesting$classe)
mean(predict(mdlnb)==ttraining$classe)
save(mdlgbm,mdllda,mdlnb,mdlrf,file = "models.RData")
?caret
?matrix
models <- list(mdlgbm,mdlrf,mdllda,mdlnb)
m <- matrix(nrow = 4,ncol = 2)
rownames(m) <- c("gbm","rf","lda","nb")
colnames(m) <- c("training error","testing error")
for (i in 1:4) {
actrain <- mean(predict(models[[i]])==ttraining$classe)
actest <- mean(predict(models[[i]],ttesting)==ttesting$classe)
m[i,] <- c(actrain,actest)
}
models <- list(mdlgbm,mdlrf,mdllda,mdlnb)
m <- matrix(nrow = 4,ncol = 2)
rownames(m) <- c("gbm","rf","lda","nb")
colnames(m) <- c("training error","testing error")
for (i in 1:4) {
actrain <- mean(predict(models[[i]])==ttraining$classe)
actest <- mean(predict(models[[i]],ttesting)==ttesting$classe)
m[i,] <- c(actrain,actest)
}
actrain <- mean(predict(models[[4]])==ttraining$classe)
for (i in 1:3) {
actrain <- mean(predict(models[[i]],ttraining)==ttraining$classe)
actest <- mean(predict(models[[i]],ttesting)==ttesting$classe)
m[i,] <- c(actrain,actest)
}
View(m)
actest <- mean(predict(models[[4]],ttesting)==ttesting$classe)
actrain <- mean(predict(models[[4]])==ttraining$classe)
m[4,] <- c(actrain,actest)
m
confusionMatrix(predict(mdlrf),ttesting$classe)
confusionMatrix(predict(mdlrf,ttesting),ttesting$classe)
testing2[,53]
predict(mdlrf,testing2)
save(mdlgbm,mdllda,mdlnb,mdlrf,m,file = "models.RData")
library(caret)
package_version(caret)
library(caret)
package_version("caret")
package_version(ggplot2)
package_version("ggplot2")
packageVersion("caret")
library(caret)
sessionInfo()
library(shiny)
runApp('myApp')
library(plotly)
p <- ggplot(mtcars, aes(x = mpg, y = wt, colour = factor(vs))) +
geom_point()
ggplotly(p) %>% layout(dragmode = "select")
?ggplotly
layout()
?layout
install.packages(c("mlbench","shinythemes"))
shiny::runApp('Courses/data_science/9_developing_data_products')
runApp('Courses/data_science/9_developing_data_products')
runApp('Courses/data_science/9_developing_data_products')
View(test)
View(plot.df)
library("BiocInstaller", lib.loc="~/R/win-library/3.4")
?biocLite
biocLite("TCGAbiolinks")
biocLite("SummarizedExperiment")
knitr::opts_chunk$set(echo = TRUE)
library(TCGAbiolinks)
library(dplyr)
library(DT)
install.packages("DT")
library(TCGAbiolinks)
library(dplyr)
library(DT)
library(SummarizedExperiment)
knitr::opts_chunk$set(echo = TRUE)
library(TCGAbiolinks)
library(dplyr)
library(DT)
library(SummarizedExperiment)
?GDCquery
query <- GDCquery(project = "TCGA-LIHC",
sample.type = "Primary solid Tumor",
#data.category = "Gene expression",
data.type = "Gene Expression Quantification",
#platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
#barcode = c("TCGA-14-0736-02A-01R-2005-01", "TCGA-06-0211-02A-02R-2005-01"),
legacy = FALSE)
query <- GDCquery(project = "TCGA-LIHC",
sample.type = "Primary solid Tumor",
data.category = "Gene expression",
data.type = "Gene Expression Quantification",
#platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
#barcode = c("TCGA-14-0736-02A-01R-2005-01", "TCGA-06-0211-02A-02R-2005-01"),
legacy = FALSE)
query <- GDCquery(project = "TCGA-LIHC",
sample.type = "Primary solid Tumor",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
#platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
#barcode = c("TCGA-14-0736-02A-01R-2005-01", "TCGA-06-0211-02A-02R-2005-01"),
legacy = FALSE)
query <- GDCquery(project = "TCGA-LIHC",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
#platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
#barcode = c("TCGA-14-0736-02A-01R-2005-01", "TCGA-06-0211-02A-02R-2005-01"),
legacy = FALSE)
query <- GDCquery(project = "TCGA-LIHC",
data.type = "Gene Expression Quantification",
#platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
#barcode = c("TCGA-14-0736-02A-01R-2005-01", "TCGA-06-0211-02A-02R-2005-01"),
legacy = FALSE)
knitr::opts_chunk$set(echo = TRUE)
query.exp.hg19 <- GDCquery(project = "TCGA-GBM",
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
barcode = c("TCGA-14-0736-02A-01R-2005-01", "TCGA-06-0211-02A-02R-2005-01"),
legacy = TRUE)
datatable(getResults(query.exp.hg19),
filter = 'top',
options = list(scrollX = TRUE, keys = TRUE, pageLength = 5),
rownames = FALSE)
query <- GDCquery(project = "TCGA-LIHC",
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type  = "normalized_results",
experimental.strategy = "RNA-Seq",
legacy = TRUE)
datatable(getResults(query.exp.hg19),
filter = 'top',
options = list(scrollX = TRUE, keys = TRUE, pageLength = 5),
rownames = FALSE)
datatable(getResults(query),
filter = 'top',
options = list(scrollX = TRUE, keys = TRUE, pageLength = 5),
rownames = FALSE)
View(query)
getResults(query)
re <- getResults(query)
View(re)
GDCdownload(query, method = "api")
?GDCdownload
GDCdownload(query, method = "api",directory = "GDCdata")
dirname(parent.frame(2)$ofile)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(getSrcDirectory()[1])
setwd("D:/LJH/reproducible_research/TCGA")
data <- GDCprepare(query)
datamatrix <- assay(data)
dim(datamatrix)
colnames(datamatrix)
data@colData@listData$classification_of_tumor
data@colData@listData$days_to_birth
data@colData@listData$days_to_recurrence
setwd("D:/LJH/reproducible_research/TCGA")
getwd()
save(data,query,file = "D:/LJH/reproducible_research/TCGA/lihc.Rdata")
rm(list=ls())
setwd("E:\\biological_DATA\\DragonStar2017\\dragon_star_data\\TCGA_data")
load("BRCA_Counts_normal.Rdata")
BRCA_Counts_normal = expressionGeneMatirx
load("BRCA_Counts_stageIA.RData")
BRCA_Counts_stageIA= expressionGeneMatirx
rm(expressionGeneMatirx)
Data_normal = BRCA_Counts_normal
Data_tumor = BRCA_Counts_stageIA
library(DESeq2)
geneNames=intersect(rownames(Data_normal),rownames(Data_tumor))
dim(Data_normal)
Data_normal=Data_normal[geneNames,1:15]
Data_tumor=Data_tumor[geneNames,1:15]
num_normal=ncol(Data_normal)
num_tumor=ncol(Data_tumor)
colnames(Data_normal)=paste(colnames(Data_normal),"_normal",sep="")
colnames(Data_tumor)=paste(colnames(Data_tumor),"_tumor",sep="")
par(mfrow=c(2,2))                   ###Histogram ֱ??ͼ###
hist(Data_normal[,1])
hist(log2(Data_normal[,1]))
hist(Data_tumor[,1])
hist(log2(Data_tumor[,1]))
Data_int=cbind(Data_normal,Data_tumor)
designNC =  c( rep("normal",num_normal), rep("tumor",num_tumor))
View(Data_int)
colDataNC=data.frame(row.names=colnames(Data_int),condition=designNC)
View(colDataNC)
DESeq_Data<- DESeqDataSetFromMatrix(countData = Data_int,colData= colDataNC,design = ~ condition)
DESeq_Data <- DESeq(DESeq_Data)
Res <- results(DESeq_Data)
names(Res)
par(mfrow=c(2,1))
plotMA(Res)
plotCounts(DESeq_Data, gene=which.min(Res$padj), intgroup="condition")
library(pheatmap)
install.packages("pheatmap")
select <- order(rowMeans(counts(DESeq_Data,normalized=TRUE)),decreasing=TRUE)[1:20]  #ѡ??????ֵ?ߵĻ???
df <- as.data.frame(colData(DESeq_Data)[,c("condition")])  #?õ?"condition"?е???Ϣ
rownames(df) = rownames(colData(DESeq_Data))
colnames(df) = c("condition")
assay_ntd <- assay(normTransform(DESeq_Data))  #?õ?matrix
pheatmap(assay_ntd[select,], cluster_rows=FALSE, show_rownames=T,cluster_cols=FALSE, annotation_col=df)
library(pheatmap)
pheatmap(assay_ntd[select,], cluster_rows=FALSE, show_rownames=T,cluster_cols=FALSE, annotation_col=df)
rm(list = ls())
load("D:/LJH/reproducible_research/TCGA/lihc.Rdata")
datamatrix <- assay(data)
setwd("D:/LJH/reproducible_research/TCGA")
data@colData@listData$classification_of_tumor
data@colData@listData$definition
unique(data@colData@listData$definition)
definition <- data@colData@listData$definition
ifelse(definition=="Solid Tissue Normal","normal","tumor")
DESeqDataSetFromMatrix()
?DESeqDataSetFromMatrix
colnames(datamatrix)
colDataNC=data.frame(row.names=colnames(datamatrix),condition=designNC)
designNc <- ifelse(definition=="Solid Tissue Normal","normal","tumor")
colDataNC=data.frame(row.names=colnames(datamatrix),condition=designNC)
colDataNC <- data.frame(row.names=colnames(datamatrix),condition=designNC)
designNc
data.frame(a=designNc)
colDataNc <- data.frame(row.names=colnames(datamatrix),condition=designNc)
DESeq_Data<- DESeqDataSetFromMatrix(countData = datamatrix,colData= colDataNC,design = ~ condition)
DESeq_Data<- DESeqDataSetFromMatrix(countData = datamatrix,colData= colDataNc,design = ~ condition)
integer(1.0)
integer(4.0)
as.integer(3.6)
DESeq_Data<- DESeqDataSetFromMatrix(countData = as.integer(datamatrix),colData= colDataNc,design = ~ condition)
View(datamatrix)
class(datamatrix)
View(colDataNc)
dim(datamatrix)
datamatrix <-as.integer(datamatrix)
datamatrix <- assay(data)
datamatrix <- apply(datamatrix,2,as.integer)
dim(datamatrix)
DESeq_Data<- DESeqDataSetFromMatrix(countData = as.integer(datamatrix),colData= colDataNc,design = ~ condition)
DESeq_Data<- DESeqDataSetFromMatrix(countData = datamatrix,colData= colDataNc,design = ~ condition)
DESeq_Data <- DESeq(DESeq_Data)
Res <- results(DESeq_Data)
head(res)
head(Res)
View(datamatrix)
datamatrix <- assay(data)
View(datamatrix)
View(datamatrix)
datamatrix <- apply(datamatrix,2,as.integer)
View(datamatrix)
as.data.frame(Res@listData)
datamatrix <- assay(data)
genenames <- rownames(datamatrix)
rownames(result) <- genenames
result <- as.data.frame(Res@listData)
rownames(result) <- genenames
result <- cbind(result,gene=genenames)
View(result)
save(list = ls(),file = "temp.RData")
knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
?DESeq
