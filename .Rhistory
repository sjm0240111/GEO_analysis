knitr::opts_chunk$set(echo = TRUE)
if (file.exists("E:\\Biological_DATA\\BioGPS\\GSE10246.RData")){
load("E:\\Biological_DATA\\BioGPS\\GSE10246.RData")
} else {
gset <- getGEO("GSE10246", GSEMatrix =TRUE, getGPL=FALSE)
# This returns a list of gsets, usually the length of the gset is 1
if (length(gset) > 1) idx <- grep("GPL1261", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# get the first gset
ex <- exprs(gset)
# expression data
descriptions <- gset@phenoData@data$description
# descriptions,here it is different types of cells
platf <-getGEO(annotation(gset), AnnotGPL=TRUE,destdir="E:\\Biological_DATA\\BioGPS")
platf_table <-data.frame(attr(dataTable(platf), "table"))
save(ex,gset,descriptions, platf, file = "E:\\Biological_DATA\\BioGPS\\GSE10246.RData")
}
if (!require(Biobase)) {
source("http://bioconductor.org/biocLite.R")
biocLite("Biobase")
library(Biobase)
}
if (!require(GEOquery)) {
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
library(GEOquery)
}
if (!require(ggplot2)) {
install.packages("ggplot2")
library(ggplot2)
}
setwd("E:\\Biological_DATA\\BioGPS")
genes <- c("Foxo1","Foxo3","Nfe2l2")
for (gene in genes) {
print(gene)
ids <- which(platf_table$Gene.symbol==gene)
for (id in ids) {
print(rownames(ex)[id])
print(summary(ex[id,]))
}
print(cor(t(ex[ids,])))
}
platf_table <-data.frame(attr(dataTable(platf), "table"))
save(ex,gset,descriptions, platf, file = "E:\\Biological_DATA\\BioGPS\\GSE10246.RData")
save(ex,gset,descriptions, platf_table, file = "E:\\Biological_DATA\\BioGPS\\GSE10246.RData")
rm(platf)
genes <- c("Foxo1","Foxo3","Nfe2l2")
for (gene in genes) {
print(gene)
ids <- which(platf_table$Gene.symbol==gene)
for (id in ids) {
print(rownames(ex)[id])
print(summary(ex[id,]))
}
print(cor(t(ex[ids,])))
}
cells <- data.frame(descriptions, colId=1:length(descriptions))
View(cells)
cells[grep("T-cells",cells$descriptions),]
cells[grep("T-cells|B-cells",cells$descriptions),]
cells[grep("T-cells|B-cells|macrophage|dendritic|thymocyte",cells$descriptions),]
cellselect <- cells[grep("T-cells|B-cells|macrophage|dendritic|thymocyte",cells$descriptions),]
genes <- c("Foxo1","Foxo3","Nfe2l2")
for (gene in genes) {
print(gene)
ids <- which(platf_table$Gene.symbol==gene)
for (id in ids) {
print(rownames(ex)[id])
print(summary(ex[id,]))
}
print(cor(t(ex[ids,])))
}
cells <- data.frame(descriptions, colId=1:length(descriptions))
colnames(ex) in ("1416981_at","1434831_a_at","1416543_at")
colnames(ex) in c("1416981_at","1434831_a_at","1416543_at")
exselect <- ex[colnames(ex) %in% c("1416981_at","1434831_a_at","1416543_at"),
cellselect[,2]]
View(exselect)
exselect <- ex[rownames(ex) %in% c("1416981_at","1434831_a_at","1416543_at"),
cellselect[,2]]
View(exselect)
data(mtcars)
View(mtcars)
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl, gears = mtcars$gear),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
View(myData)
?aggregate
View(myData)
dim(myData)
myData <- do.call(data.frame, myData)
View(myData)
myData$se <- myData$x.sd / sqrt(myData$x.n)
colnames(myData) <- c("cyl", "gears", "mean", "sd", "n", "se")
myData$names <- c(paste(myData$cyl, "cyl /",
myData$gears, " gear"))
library(ggplot2)
p <- ggplot(data = myData, aes(x = factor(cyl), y = mean,
fill = factor(gears)))
p + geom_bar(stat = "identity",
position = position_dodge(0.9))
View(cells)
View(ex)
View(cellselect)
?order
order(c(1,3,2))
order(c(1,3,2,4))
order(c(1,3.5,2,4))
rank(c(1,3.5,2,4))
rank(c(1,3.5,2,8))
rank(c(1,9,3.5,2,8))
order(c(1,9,3.5,2,8))
exselect <- t(ex[rownames(ex) %in% c("1416981_at","1434831_a_at","1416543_at"),
cellselect[,2]])
View(exselect)
colnames(exselect)
plotData <- cbind(exselect,cellselect$descriptions)
View(plotData)
plotData <- cbind(exselect,celltype = cellselect$descriptions)
plotData <- data.frame(exselect,celltype = cellselect$descriptions)
View(plotData)
melt
?melt
?spread
library(tidyr)
?spread
example("spread")
df <- data.frame(row = rep(c(1, 51), each = 3),
var = c("Sepal.Length", "Species", "Species_num"),
value = c(5.1, "setosa", 1, 7.0, "versicolor", 2))
View(df)
df %>% spread(var, value)
?gather
match(rownames(ex), c("1416981_at","1434831_a_at","1416543_at"))
match(c("1416981_at","1434831_a_at","1416543_at"),rownames(ex))
ex[19137,]
rownames(ex)[19137]
exselect <- t(ex[match(c("1416981_at","1434831_a_at","1416543_at"),rownames(ex)),
cellselect[,2]])
plotData <- data.frame(exselect, cellselect$descriptions)
names(plotData) <- c("Foxo1","Foxo3","Nfe2l2","celltype")
View(plotData)
ex[19137,13:14]
stocks <- data_frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
View(stocks)
gather(stocks, stock, price, -time)
plotData <- gather(plotData,gene,exp,-celltype)
View(plotData)
myData <- aggregate(plotData$exp,
by = list(cyl = plotData$celltype, plotData$gene),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
View(myData)
myData <- do.call(data.frame, myData)
names(myData) <- c("celltype", "gene", "mean", "sd", "n")
levels(myData$celltype)
plotData <- data.frame(exselect, as.character(cellselect$descriptions))
names(plotData) <- c("Foxo1","Foxo3","Nfe2l2","celltype")
plotData <- gather(plotData,gene,exp,-celltype)
myData <- aggregate(plotData$exp,
by = list(plotData$celltype, plotData$gene),
FUN = function(x) c(mean = mean(x), sd = sd(x),
n = length(x)))
myData <- do.call(data.frame, myData)
names(myData) <- c("celltype", "gene", "mean", "sd", "n")
View(myData)
limits <- aes(ymax = myData$mean + myData$sd,
ymin = myData$mean - myData$sd)
p <- ggplot(data = myData, aes(x = celltype, y = mean,
fill = gene))
p + geom_bar(stat = "identity",
position = position_dodge(0.9))
limits <- aes(ymax = myData$mean + myData$sd,
ymin = myData$mean - myData$sd)
p <- ggplot(data = myData, aes(x = celltype, y = mean,
fill = gene))
p + geom_bar(stat = "identity",
position = position_dodge(0.9))
limits <- aes(ymax = myData$mean + myData$sd,
ymin = myData$mean - myData$sd)
p <- ggplot(data = myData, aes(x = celltype, y = mean,
fill = gene))
p + geom_bar(stat = "identity",position = position_dodge(0.9))+
geom_errorbar(limits, position = position_dodge(0.9), width = 0.25) +
labs(x = "cell types", y = "relative expression") +
ggtitle("Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells") +
scale_fill_discrete(name = "genes")
limits <- aes(ymax = myData$mean + myData$sd,
ymin = myData$mean - myData$sd)
p <- ggplot(data = myData, aes(x = celltype, y = mean,
fill = gene))
p + geom_bar(stat = "identity",position = position_dodge(0.9))+
geom_errorbar(limits, position = position_dodge(0.9), width = 0.25) +
labs(x = "cell types", y = "relative expression") +
ggtitle("Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells") +
scale_fill_discrete(name = "genes")
limits <- aes(ymax = myData$mean + myData$sd,
ymin = myData$mean - myData$sd)
p <- ggplot(data = myData, aes(x = celltype, y = mean,
fill = gene))
p + geom_bar(stat = "identity",position = position_dodge(0.9))+
geom_errorbar(limits, position = position_dodge(0.9), width = 0.25) +
labs(x = "cell types", y = "relative expression") +
ggtitle("Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells") +
scale_fill_discrete(name = "genes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
limits <- aes(ymax = myData$mean + myData$sd,
ymin = myData$mean - myData$sd)
p <- ggplot(data = myData, aes(x = celltype, y = mean,
fill = gene))
p + geom_bar(stat = "identity",position = position_dodge(0.9))+
geom_errorbar(limits, position = position_dodge(0.9), width = 0.25) +
labs(x = "cell types", y = "relative expression") +
ggtitle("Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells") +
scale_fill_discrete(name = "genes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pdf(file = "Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells.pdf",width = 2000,height = 2000)
limits <- aes(ymax = myData$mean + myData$sd,
ymin = myData$mean - myData$sd)
p <- ggplot(data = myData, aes(x = celltype, y = mean,
fill = gene))
p + geom_bar(stat = "identity",position = position_dodge(0.9))+
geom_errorbar(limits, position = position_dodge(0.9), width = 0.25) +
labs(x = "cell types", y = "relative expression") +
ggtitle("Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells") +
scale_fill_discrete(name = "genes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
pdf(file = "Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells.pdf")
limits <- aes(ymax = myData$mean + myData$sd,
ymin = myData$mean - myData$sd)
p <- ggplot(data = myData, aes(x = celltype, y = mean,
fill = gene))
p + geom_bar(stat = "identity",position = position_dodge(0.9))+
geom_errorbar(limits, position = position_dodge(0.9), width = 0.25) +
labs(x = "cell types", y = "relative expression") +
ggtitle("Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells") +
scale_fill_discrete(name = "genes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
?pdf
7*16/9
pdf(file = "Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells.pdf",
width=12,height = 7)
pdf(file = "Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells.pdf",
width=12,height = 7)
limits <- aes(ymax = myData$mean + myData$sd,
ymin = myData$mean - myData$sd)
p <- ggplot(data = myData, aes(x = celltype, y = mean,
fill = gene))
p + geom_bar(stat = "identity",position = position_dodge(0.9))+
geom_errorbar(limits, position = position_dodge(0.9), width = 0.25) +
labs(x = "cell types", y = "relative expression") +
ggtitle("Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells") +
scale_fill_discrete(name = "genes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
#pdf(file = "Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells.pdf",
#    width=12,height = 7)
limits <- aes(ymax = myData$mean + myData$sd,
ymin = myData$mean - myData$sd)
p <- ggplot(data = myData, aes(x = celltype, y = mean,
fill = gene))
p + geom_bar(stat = "identity",position = position_dodge(0.9))+
geom_errorbar(limits, position = position_dodge(0.9), width = 0.25) +
labs(x = "cell types", y = "relative expression") +
ggtitle("Expression of Foxo1, Foxo3 and Nfe2l2 in different immune cells") +
scale_fill_discrete(name = "genes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#dev.off()
